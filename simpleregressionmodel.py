# -*- coding: utf-8 -*-
"""SimpleRegressionModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-gI3K9A0UGYzslU4F4ZCV2cXofLLF9tF

# **MODEL1**

**Importing Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""**Import dataset**"""

data = pd.read_csv('monet.csv')

""" **Splitting data into x and y**



"""

x = data[['WIDTH']]
y= data.PRICE

"""**Splitting the dataset into traning set and testing set**"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)

""" **Simple Regression model**





"""

from sklearn.linear_model import LinearRegression

lr=LinearRegression().fit(x_train,y_train)

"""**Predicting Test Results**


"""

y_pred=lr.predict(x_test)
y_pred

"""**Estimate of Model**"""

from sklearn.metrics import mean_squared_error
mse=mean_squared_error(y_test,y_pred)
print("Mean Square error:",mse)
print('Coefficient value:', lr.coef_)
print('Intercept:', lr.intercept_)
rsquare=lr.score(x_test,y_test)
print("Rsquare:",rsquare*100,'%')

"""**Plotting the graph for regression variables and regression line**"""

plt.scatter(x_test,y_test,color='red')
plt.plot(x_train,lr.predict(x_train),color='blue')
plt.title('Price a house based on width(training set)')
plt.xlabel('width')
plt.ylabel('Price')
plt.show()

"""# **MODEL 2**

**Combining 'height' and 'width' as 'Size'**
"""

data['Size'] = data.HEIGHT*data.WIDTH

"""**Splitting data into x2 and y2**"""

x2 = data[['Size']]
y2 = data.PRICE

""" **Splitting the dataset into traning set and testing set**"""

from sklearn.model_selection import train_test_split
x2_train,x2_test,y2_train,y2_test = train_test_split(x2,y2,test_size=0.2)

"""**Simple Regression model**"""

from sklearn.linear_model import LinearRegression
lr2=LinearRegression().fit(x2_train,y2_train)

"""**Predicting Test Results**


"""

y_pred2 = lr2.predict(x2_test)
y_pred2

"""**Estimate of Model**"""

from sklearn.metrics import mean_squared_error
mse2=mean_squared_error(y2_test,y_pred2)
print("Mean Square Error:",mse2)
print('Coefficient value:', lr2.coef_)
print('Intercept:', lr2.intercept_)
rsquare2=lr2.score(x2_test,y2_test)
print("RSquare:",rsquare2*100,'%')

"""**Plotting the graph for regression variables and regression line**"""

plt.scatter(x2_test,y2_test,color='red')
plt.plot(x2_train,lr2.predict(x2_train),color='blue')
plt.title('Price of a house based on size(Training set)')
plt.xlabel('Size')
plt.ylabel('price')
plt.show

"""## **Multivariate Regression Model**

**Splitting data into x3 and y3**
"""

x3=data.drop(axis=1,columns='PRICE')
y3=data.PRICE

""" **Splitting the dataset into traning set and testing set**"""

from sklearn.model_selection import train_test_split
x3_train,x3_test,y3_train,y3_test = train_test_split(x3,y3,test_size=0.2,random_state=3)

"""**Regression Model**"""

from sklearn.linear_model import LinearRegression
lr3=LinearRegression().fit(x3_train,y3_train)

"""**Predicting Test Results**


"""

y3_pred = lr3.predict(x3_test)
y3_pred

"""**Estimate Model**"""

from sklearn.metrics import mean_squared_error
mse3=mean_squared_error(y3_test,y3_pred)
print("Mean Squared error:",mse3)
print('Coefficient value:', lr3.coef_)
print('Intercept:', lr3.intercept_)
rsquare3=lr3.score(x3_test,y3_test)
print("RSquare :",rsquare3*100,'%')

"""**Plotting the Regression Variables**"""

plt.scatter(y3_test,y3_pred)
plt.show()